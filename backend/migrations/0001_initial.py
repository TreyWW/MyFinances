# Generated by Django 5.1 on 2024-09-19 16:14

import backend.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import shortuuid.django_fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="APIKey",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("service", models.CharField(choices=[("aws_api_destination", "Aws Api Destination")], max_length=20, null=True)),
                ("key", models.CharField(default=backend.models.RandomAPICode, max_length=100)),
                ("last_used", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "API Key",
                "verbose_name_plural": "API Keys",
            },
        ),
        migrations.CreateModel(
            name="BankDetail",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("account_holder_name", models.CharField(max_length=100)),
                ("account_number", models.CharField(max_length=16)),
                ("sort_code", models.CharField(max_length=9)),
            ],
        ),
        migrations.CreateModel(
            name="FeatureFlags",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(editable=False, max_length=100, unique=True)),
                ("description", models.TextField(blank=True, editable=False, max_length=500, null=True)),
                ("value", models.BooleanField(default=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Feature Flag",
                "verbose_name_plural": "Feature Flags",
            },
        ),
        migrations.CreateModel(
            name="InvoiceItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=50)),
                ("description", models.CharField(max_length=100)),
                ("is_service", models.BooleanField(default=True)),
                ("hours", models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ("price_per_hour", models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ("price", models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="QuotaLimit",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.CharField(editable=False, max_length=100, unique=True)),
                ("name", models.CharField(editable=False, max_length=100)),
                ("description", models.TextField(blank=True, max_length=500, null=True)),
                ("value", models.IntegerField()),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("adjustable", models.BooleanField(default=True)),
                (
                    "limit_type",
                    models.CharField(
                        choices=[
                            ("per_month", "Per Month"),
                            ("per_day", "Per Day"),
                            ("per_client", "Per Client"),
                            ("per_invoice", "Per Invoice"),
                            ("per_team", "Per Team"),
                            ("per_quota", "Per Quota"),
                            ("forever", "Forever"),
                        ],
                        default="per_month",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "Quota Limit",
                "verbose_name_plural": "Quota Limits",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False, help_text="Designates whether the user can log into this admin site.", verbose_name="staff status"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("stripe_customer_id", models.CharField(blank=True, max_length=255, null=True)),
                ("entitlements", models.JSONField(blank=True, default=list, null=True)),
                ("awaiting_email_verification", models.BooleanField(default=True)),
                ("require_change_password", models.BooleanField(default=False)),
                (
                    "role",
                    models.CharField(
                        choices=[("DEV", "Developer"), ("STAFF", "Staff"), ("USER", "User"), ("TESTER", "Tester")],
                        default="USER",
                        max_length=10,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", backend.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Client",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("active", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=64)),
                ("phone_number", models.CharField(blank=True, max_length=100, null=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("email_verified", models.BooleanField(default=False)),
                ("company", models.CharField(blank=True, max_length=100, null=True)),
                ("contact_method", models.CharField(blank=True, max_length=100, null=True)),
                ("is_representative", models.BooleanField(default=False)),
                ("address", models.TextField(blank=True, max_length=100, null=True)),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                ("country", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Error",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("error", models.CharField(max_length=250, null=True)),
                ("error_code", models.CharField(max_length=100, null=True)),
                ("error_colour", models.CharField(default="danger", max_length=25)),
                ("date", models.DateTimeField(auto_now=True)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="InvoiceRecurringProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("boto_schedule_arn", models.CharField(blank=True, max_length=2048, null=True)),
                ("boto_schedule_uuid", models.UUIDField(blank=True, default=None, null=True)),
                ("boto_last_updated", models.DateTimeField(auto_now=True)),
                ("received", models.BooleanField(default=False)),
                (
                    "boto_schedule_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("creating", "Creating"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("deleting", "Deleting"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=100,
                    ),
                ),
                ("client_name", models.CharField(blank=True, max_length=100, null=True)),
                ("client_email", models.EmailField(blank=True, max_length=254, null=True)),
                ("client_company", models.CharField(blank=True, max_length=100, null=True)),
                ("client_address", models.CharField(blank=True, max_length=100, null=True)),
                ("client_city", models.CharField(blank=True, max_length=100, null=True)),
                ("client_county", models.CharField(blank=True, max_length=100, null=True)),
                ("client_country", models.CharField(blank=True, max_length=100, null=True)),
                ("client_is_representative", models.BooleanField(default=False)),
                ("self_name", models.CharField(blank=True, max_length=100, null=True)),
                ("self_company", models.CharField(blank=True, max_length=100, null=True)),
                ("self_address", models.CharField(blank=True, max_length=100, null=True)),
                ("self_city", models.CharField(blank=True, max_length=100, null=True)),
                ("self_county", models.CharField(blank=True, max_length=100, null=True)),
                ("self_country", models.CharField(blank=True, max_length=100, null=True)),
                ("sort_code", models.CharField(blank=True, max_length=8, null=True)),
                ("account_holder_name", models.CharField(blank=True, max_length=100, null=True)),
                ("account_number", models.CharField(blank=True, max_length=100, null=True)),
                ("reference", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_number", models.CharField(blank=True, max_length=100, null=True)),
                ("vat_number", models.CharField(blank=True, max_length=100, null=True)),
                ("logo", models.ImageField(blank=True, null=True, storage=backend.models._private_storage, upload_to="invoice_logos")),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("GBP", "British Pound Sterling"),
                            ("EUR", "Euro"),
                            ("USD", "United States Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("INR", "Indian Rupee"),
                            ("AUD", "Australian Dollar"),
                            ("CAD", "Canadian Dollar"),
                        ],
                        default="GBP",
                        max_length=3,
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_issued", models.DateField(blank=True, null=True)),
                ("discount_amount", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MaxValueValidator(100)]
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("ongoing", "Ongoing"), ("paused", "paused"), ("cancelled", "cancelled")], default="paused", max_length=10
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[("weekly", "Weekly"), ("monthly", "Monthly"), ("yearly", "Yearly")], default="monthly", max_length=20
                    ),
                ),
                ("end_date", models.DateField(blank=True, null=True)),
                ("due_after_days", models.PositiveSmallIntegerField(default=7)),
                ("day_of_week", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("day_of_month", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("month_of_year", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("client_to", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="backend.client")),
                ("items", models.ManyToManyField(blank=True, to="backend.invoiceitem")),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("with_items", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("client_name", models.CharField(blank=True, max_length=100, null=True)),
                ("client_email", models.EmailField(blank=True, max_length=254, null=True)),
                ("client_company", models.CharField(blank=True, max_length=100, null=True)),
                ("client_address", models.CharField(blank=True, max_length=100, null=True)),
                ("client_city", models.CharField(blank=True, max_length=100, null=True)),
                ("client_county", models.CharField(blank=True, max_length=100, null=True)),
                ("client_country", models.CharField(blank=True, max_length=100, null=True)),
                ("client_is_representative", models.BooleanField(default=False)),
                ("self_name", models.CharField(blank=True, max_length=100, null=True)),
                ("self_company", models.CharField(blank=True, max_length=100, null=True)),
                ("self_address", models.CharField(blank=True, max_length=100, null=True)),
                ("self_city", models.CharField(blank=True, max_length=100, null=True)),
                ("self_county", models.CharField(blank=True, max_length=100, null=True)),
                ("self_country", models.CharField(blank=True, max_length=100, null=True)),
                ("sort_code", models.CharField(blank=True, max_length=8, null=True)),
                ("account_holder_name", models.CharField(blank=True, max_length=100, null=True)),
                ("account_number", models.CharField(blank=True, max_length=100, null=True)),
                ("reference", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_number", models.CharField(blank=True, max_length=100, null=True)),
                ("vat_number", models.CharField(blank=True, max_length=100, null=True)),
                ("logo", models.ImageField(blank=True, null=True, storage=backend.models._private_storage, upload_to="invoice_logos")),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("GBP", "British Pound Sterling"),
                            ("EUR", "Euro"),
                            ("USD", "United States Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("INR", "Indian Rupee"),
                            ("AUD", "Australian Dollar"),
                            ("CAD", "Canadian Dollar"),
                        ],
                        default="GBP",
                        max_length=3,
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_issued", models.DateField(blank=True, null=True)),
                ("discount_amount", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MaxValueValidator(100)]
                    ),
                ),
                ("invoice_id", models.IntegerField(blank=True, null=True, unique=True)),
                ("date_due", models.DateField()),
                (
                    "payment_status",
                    models.CharField(
                        choices=[("pending", "Pending"), ("paid", "Paid"), ("overdue", "Overdue")], default="pending", max_length=10
                    ),
                ),
                ("client_to", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="backend.client")),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                ("items", models.ManyToManyField(blank=True, to="backend.invoiceitem")),
                (
                    "invoice_recurring_profile",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generated_invoices",
                        to="backend.invoicerecurringprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InvoiceReminder",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("boto_schedule_arn", models.CharField(blank=True, max_length=2048, null=True)),
                ("boto_schedule_uuid", models.UUIDField(blank=True, default=None, null=True)),
                ("boto_last_updated", models.DateTimeField(auto_now=True)),
                ("received", models.BooleanField(default=False)),
                (
                    "boto_schedule_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("creating", "Creating"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("deleting", "Deleting"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=100,
                    ),
                ),
                ("days", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "reminder_type",
                    models.CharField(
                        choices=[("before_due", "Before Due"), ("after_due", "After Due"), ("on_overdue", "On Overdue")],
                        default="before_due",
                        max_length=100,
                    ),
                ),
                (
                    "invoice",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="invoice_reminders", to="backend.invoice"),
                ),
            ],
            options={
                "verbose_name": "Invoice Reminder",
                "verbose_name_plural": "Invoice Reminders",
            },
        ),
        migrations.CreateModel(
            name="InvoiceURL",
            fields=[
                (
                    "uuid",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet=None, length=8, max_length=8, prefix="", primary_key=True, serialize=False
                    ),
                ),
                ("system_created", models.BooleanField(default=False)),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("expires", models.DateTimeField(blank=True, null=True)),
                ("never_expire", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=True)),
                (
                    "created_by",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "invoice",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="invoice_urls", to="backend.invoice"),
                ),
            ],
            options={
                "verbose_name": "Invoice URL",
                "verbose_name_plural": "Invoice URLs",
            },
        ),
        migrations.CreateModel(
            name="LoginLog",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "service",
                    models.CharField(choices=[("manual", "Manual"), ("magic_link", "Magic Link")], default="manual", max_length=14),
                ),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="MonthlyReportRow",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateField()),
                ("reference_number", models.CharField(max_length=100)),
                ("item_type", models.CharField(max_length=100)),
                ("client_name", models.CharField(blank=True, max_length=64, null=True)),
                ("paid_in", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ("paid_out", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ("client", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.client")),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("message", models.CharField(max_length=100)),
                (
                    "action",
                    models.CharField(
                        choices=[("normal", "Normal"), ("modal", "Modal"), ("redirect", "Redirect")], default="normal", max_length=10
                    ),
                ),
                ("action_value", models.CharField(blank=True, max_length=100, null=True)),
                ("extra_type", models.CharField(blank=True, max_length=100, null=True)),
                ("extra_value", models.CharField(blank=True, max_length=100, null=True)),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="user_notifications", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, unique=True)),
                ("stripe_customer_id", models.CharField(blank=True, max_length=255, null=True)),
                ("entitlements", models.JSONField(blank=True, default=list, null=True)),
                (
                    "leader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="teams_leader_of", to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("members", models.ManyToManyField(related_name="teams_joined", to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name="invoicerecurringprofile",
            name="organization",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
        ),
        migrations.CreateModel(
            name="InvoiceProduct",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=50)),
                ("description", models.CharField(max_length=100)),
                ("quantity", models.IntegerField()),
                ("rate", models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="invoice",
            name="organization",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
        ),
        migrations.CreateModel(
            name="FileStorageFile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "file",
                    models.FileField(storage=backend.models._private_storage, upload_to=backend.models.upload_to_user_separate_folder),
                ),
                ("file_uri_path", models.CharField(max_length=500)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_edited_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="files_edited",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EmailSendStatus",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("updated_status_at", models.DateTimeField(auto_now_add=True)),
                ("recipient", models.TextField()),
                ("aws_message_id", models.CharField(blank=True, editable=False, max_length=100, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("send", "Send"),
                            ("reject", "Reject"),
                            ("bounce", "Bounce"),
                            ("complaint", "Complaint"),
                            ("delivery", "Delivery"),
                            ("open", "Open"),
                            ("click", "Click"),
                            ("rendering_failure", "Rendering_Failure"),
                            ("delivery_delay", "Delivery_Delay"),
                            ("subscription", "Subscription"),
                            ("failed_to_send", "Failed_To_Send"),
                            ("pending", "Pending"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "sent_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="emails_sent",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DefaultValues",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("GBP", "British Pound Sterling"),
                            ("EUR", "Euro"),
                            ("USD", "United States Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("INR", "Indian Rupee"),
                            ("AUD", "Australian Dollar"),
                            ("CAD", "Canadian Dollar"),
                        ],
                        default="GBP",
                        max_length=3,
                    ),
                ),
                ("invoice_due_date_value", models.PositiveSmallIntegerField(default=7)),
                (
                    "invoice_due_date_type",
                    models.CharField(
                        choices=[("days_after", "Days After"), ("date_following", "Date Following"), ("date_current", "Date Current")],
                        default="days_after",
                        max_length=20,
                    ),
                ),
                ("invoice_date_value", models.PositiveSmallIntegerField(default=15)),
                (
                    "invoice_date_type",
                    models.CharField(
                        choices=[("day_of_month", "Day Of Month"), ("days_after", "Days After")], default="day_of_month", max_length=20
                    ),
                ),
                ("invoice_from_name", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_company", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_address", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_city", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_county", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_country", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_account_number", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_sort_code", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_account_holder_name", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "default_invoice_logo",
                    models.ImageField(blank=True, null=True, storage=backend.models._private_storage, upload_to="invoice_logos/"),
                ),
                ("bank_details", models.ManyToManyField(blank=True, related_name="default_values", to="backend.bankdetail")),
                (
                    "client",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="default_values",
                        to="backend.client",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="client",
            name="organization",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("action", models.CharField(max_length=100)),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="APIAuthToken",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("hashed_key", models.CharField(max_length=128, unique=True, verbose_name="Key")),
                ("name", models.CharField(max_length=64, verbose_name="Key Name")),
                ("description", models.TextField(blank=True, null=True, verbose_name="Description")),
                ("created", models.DateTimeField(auto_now_add=True, verbose_name="Created")),
                ("last_used", models.DateTimeField(blank=True, null=True, verbose_name="Last Used")),
                ("expires", models.DateTimeField(blank=True, help_text="Leave blank for no expiry", null=True, verbose_name="Expires")),
                ("expired", models.BooleanField(default=False, help_text="If the key has expired", verbose_name="Expired")),
                ("active", models.BooleanField(default=True, help_text="If the key is active", verbose_name="Active")),
                ("scopes", models.JSONField(default=list, help_text="List of permitted scopes", verbose_name="Scopes")),
                (
                    "administrator_service_type",
                    models.CharField(blank=True, max_length=64, null=True, verbose_name="Administrator Service Type"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
            ],
            options={
                "verbose_name": "API Key",
                "verbose_name_plural": "API Keys",
            },
        ),
        migrations.AddField(
            model_name="user",
            name="logged_in_as_team",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="backend.organization"),
        ),
        migrations.CreateModel(
            name="PasswordSecret",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("secret", models.TextField(max_length=300)),
                ("expires", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="password_secrets", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuotaIncreaseRequest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("reason", models.CharField(max_length=1000)),
                ("new_value", models.IntegerField()),
                ("current_value", models.IntegerField()),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("pending", "Pending"), ("approved", "Approved"), ("rejected", "Rejected")],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="quota_increase_requests", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "quota_limit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="quota_increase_requests", to="backend.quotalimit"
                    ),
                ),
            ],
            options={
                "verbose_name": "Quota Increase Request",
                "verbose_name_plural": "Quota Increase Requests",
            },
        ),
        migrations.CreateModel(
            name="QuotaOverrides",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("value", models.IntegerField()),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
                (
                    "quota_limit",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="quota_overrides", to="backend.quotalimit"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "verbose_name": "Quota Override",
                "verbose_name_plural": "Quota Overrides",
            },
        ),
        migrations.CreateModel(
            name="QuotaUsage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("extra_data", models.IntegerField(blank=True, null=True)),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
                (
                    "quota_limit",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="quota_usage", to="backend.quotalimit"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "verbose_name": "Quota Usage",
                "verbose_name_plural": "Quota Usage",
            },
        ),
        migrations.CreateModel(
            name="Receipt",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("image", models.ImageField(storage=backend.models._private_storage, upload_to="receipts")),
                ("total_price", models.FloatField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("date_uploaded", models.DateTimeField(auto_now_add=True)),
                ("receipt_parsed", models.JSONField(blank=True, null=True)),
                ("merchant_store", models.CharField(blank=True, max_length=255, null=True)),
                ("purchase_category", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ReceiptDownloadToken",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("file", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="backend.receipt")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="TeamInvitation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code", models.CharField(max_length=10)),
                ("expires", models.DateTimeField(blank=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("invited_by", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="team_invitations", to="backend.organization"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="team_invitations", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "Team Invitation",
                "verbose_name_plural": "Team Invitations",
            },
        ),
        migrations.CreateModel(
            name="TeamMemberPermission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("scopes", models.JSONField(default=list, help_text="List of permitted scopes", verbose_name="Scopes")),
                (
                    "team",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="permissions", to="backend.organization"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="team_permissions", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TracebackError",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("error", models.CharField(max_length=5000, null=True)),
                ("date", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserSettings",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("dark_mode", models.BooleanField(default=True)),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("GBP", "British Pound Sterling"),
                            ("EUR", "Euro"),
                            ("USD", "United States Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("INR", "Indian Rupee"),
                            ("AUD", "Australian Dollar"),
                            ("CAD", "Canadian Dollar"),
                        ],
                        default="GBP",
                        max_length=3,
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, storage=backend.models._public_storage, upload_to="profile_pictures/"),
                ),
                ("disabled_features", models.JSONField(default=list)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="user_profile", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "User Settings",
                "verbose_name_plural": "User Settings",
            },
        ),
        migrations.CreateModel(
            name="VerificationCodes",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("token", models.TextField(default=backend.models.RandomCode, editable=False)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("expiry", models.DateTimeField(default=backend.models.add_3hrs_from_now)),
                (
                    "service",
                    models.CharField(choices=[("create_account", "Create Account"), ("reset_password", "Reset Password")], max_length=14),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "verbose_name": "Verification Code",
                "verbose_name_plural": "Verification Codes",
            },
        ),
        migrations.CreateModel(
            name="MultiFileUpload",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("finished_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("files", models.ManyToManyField(related_name="multi_file_uploads", to="backend.filestoragefile")),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
            ],
            options={
                "abstract": False,
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(("organization__isnull", False), ("user__isnull", True)),
                            models.Q(("organization__isnull", True), ("user__isnull", False)),
                            _connector="OR",
                        ),
                        name="backend_multifileupload_check_user_or_organization",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="MonthlyReport",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
                ("profit", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ("invoices_sent", models.PositiveIntegerField(default=0)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("recurring_customers", models.PositiveIntegerField(default=0)),
                ("payments_in", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ("payments_out", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("GBP", "British Pound Sterling"),
                            ("EUR", "Euro"),
                            ("USD", "United States Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("INR", "Indian Rupee"),
                            ("AUD", "Australian Dollar"),
                            ("CAD", "Canadian Dollar"),
                        ],
                        default="GBP",
                        max_length=3,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                ("items", models.ManyToManyField(blank=True, to="backend.monthlyreportrow")),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="backend.organization"),
                ),
            ],
            options={
                "abstract": False,
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(("organization__isnull", False), ("user__isnull", True)),
                            models.Q(("organization__isnull", True), ("user__isnull", False)),
                            _connector="OR",
                        ),
                        name="backend_monthlyreport_check_user_or_organization",
                    )
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="invoicerecurringprofile",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_invoicerecurringprofile_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoiceproduct",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_invoiceproduct_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_invoice_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="filestoragefile",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_filestoragefile_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="emailsendstatus",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_emailsendstatus_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultvalues",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_defaultvalues_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="client",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_client_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="receipt",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_receipt_check_user_or_organization",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="teammemberpermission",
            unique_together={("team", "user")},
        ),
    ]
